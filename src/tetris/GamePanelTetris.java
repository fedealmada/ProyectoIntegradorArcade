package tetris;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import javax.swing.JOptionPane;
import main.Main;

public class GamePanelTetris extends javax.swing.JPanel implements Runnable {
      //// Definimos constantes para el ancho y alto del panel

      public static final int WIDTH = 1280;
      public static final int HEIGHT = 680;
      final int FPS = 60;//actualiza y dibuja el screen 60 veces por segundo
      Thread gameThread;// Declaramos un hilo para el juego
      PlayManager pm;// Declaramos una instancia de PlayManager para manejar la lógica del juego
      boolean isPaused = false;
      
      public GamePanelTetris() {//contructor
            initComponents();// Inicializamos los componentes del panel

            this.setPreferredSize(new Dimension(WIDTH, HEIGHT));
            this.setBackground(Color.black);//fondo
            this.setLayout(null); // Establecemos el diseño del panel a nulo



            this.addKeyListener(new KeyHandler()); // Añadimos un KeyListener para manejar eventos de teclado
            this.setFocusable(true);// Hacemos el panel enfocables para recibir eventos de teclado
      }

      /**
       * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
       * content of this method is always regenerated by the Form Editor.
       */
      @SuppressWarnings("unchecked")
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
      private void initComponents() {

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
            this.setLayout(layout);
            layout.setHorizontalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGap(0, 400, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                  layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addGap(0, 300, Short.MAX_VALUE)
            );
      }// </editor-fold>//GEN-END:initComponents


      public void launchGame() { // metodo para activar el hilo del juego
            pm = new PlayManager();// Inicializamos el gestor del juego
            gameThread = new Thread(this);//instanciamos el hilo
            gameThread.start();//iniciamos el hilo, lo que llamara el metodo run  
            this.repaint();
      }
      
      public void stopGame() {
           
            pm.update();
             gameThread = null;
            this.repaint();
      }

      @Override
      public void run() {
            double drawInterval = 1000000000 / FPS;
            double delta = 0;
            long lastTime = System.nanoTime();
            long currentTime;

            while (gameThread != null) {
                  currentTime = System.nanoTime();
                  delta += (currentTime - lastTime) / drawInterval;
                  lastTime = currentTime;

                  if (delta >= 1) {
                        if (!KeyHandler.pausePressed && !pm.gameOver) {
                              pm.update();
                        }
                        repaint();
                        delta--;
                  }
            }
      }

      // Método para actualizar la lógica del juego
      private void update() {
            if (!isPaused && !pm.gameOver) {
                  pm.update();
            }
      }

      public void paintComponent(Graphics g) {//metodo paintComponent para dibujar en el panel
            super.paintComponent(g);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

            pm.draw(g2);
            pm.drawParticles(g2);

      }


      // Variables declaration - do not modify//GEN-BEGIN:variables
      // End of variables declaration//GEN-END:variables
}
